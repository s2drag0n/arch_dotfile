import FDBKeyRange from"./FDBKeyRange.js";import FDBObjectStore from"./FDBObjectStore.js";import cmp from"./lib/cmp.js";import{DataError,InvalidAccessError,InvalidStateError,ReadOnlyError,TransactionInactiveError}from"./lib/errors.js";import extractKey from"./lib/extractKey.js";import valueToKey from"./lib/valueToKey.js";const getEffectiveObjectStore=cursor=>cursor.source instanceof FDBObjectStore?cursor.source:cursor.source.objectStore,makeKeyRange=(range,lowers,uppers)=>{let lower=void 0!==range?range.lower:void 0,upper=void 0!==range?range.upper:void 0;for(const lowerTemp of lowers)void 0!==lowerTemp&&(void 0!==lower&&1!==cmp(lower,lowerTemp)||(lower=lowerTemp));for(const upperTemp of uppers)void 0!==upperTemp&&(void 0!==upper&&-1!==cmp(upper,upperTemp)||(upper=upperTemp));return void 0!==lower&&void 0!==upper?FDBKeyRange.bound(lower,upper):void 0!==lower?FDBKeyRange.lowerBound(lower):void 0!==upper?FDBKeyRange.upperBound(upper):void 0};class FDBCursor{_gotValue=!1;_position=void 0;_objectStorePosition=void 0;_keyOnly=!1;_key=void 0;_primaryKey=void 0;constructor(source,range,direction="next",request,keyOnly=!1){this._range=range,this._source=source,this._direction=direction,this._request=request,this._keyOnly=keyOnly}get source(){return this._source}set source(val){}get request(){return this._request}set request(val){}get direction(){return this._direction}set direction(val){}get key(){return this._key}set key(val){}get primaryKey(){return this._primaryKey}set primaryKey(val){}_iterate(key,primaryKey){const sourceIsObjectStore=this.source instanceof FDBObjectStore,records=this.source instanceof FDBObjectStore?this.source._rawObjectStore.records:this.source._rawIndex.records;let foundRecord,result;if("next"===this.direction){const range=makeKeyRange(this._range,[key,this._position],[]);for(const record of records.values(range)){const cmpResultKey=void 0!==key?cmp(record.key,key):void 0,cmpResultPosition=void 0!==this._position?cmp(record.key,this._position):void 0;if(void 0===key||-1!==cmpResultKey){if(void 0!==primaryKey){if(-1===cmpResultKey)continue;const cmpResultPrimaryKey=cmp(record.value,primaryKey);if(0===cmpResultKey&&-1===cmpResultPrimaryKey)continue}if(void 0===this._position||!sourceIsObjectStore||1===cmpResultPosition){if(void 0!==this._position&&!sourceIsObjectStore){if(-1===cmpResultPosition)continue;if(0===cmpResultPosition&&1!==cmp(record.value,this._objectStorePosition))continue}if(void 0===this._range||this._range.includes(record.key)){foundRecord=record;break}}}}}else if("nextunique"===this.direction){const range=makeKeyRange(this._range,[key,this._position],[]);for(const record of records.values(range))if((void 0===key||-1!==cmp(record.key,key))&&(void 0===this._position||1===cmp(record.key,this._position))&&(void 0===this._range||this._range.includes(record.key))){foundRecord=record;break}}else if("prev"===this.direction){const range=makeKeyRange(this._range,[],[key,this._position]);for(const record of records.values(range,"prev")){const cmpResultKey=void 0!==key?cmp(record.key,key):void 0,cmpResultPosition=void 0!==this._position?cmp(record.key,this._position):void 0;if(void 0===key||1!==cmpResultKey){if(void 0!==primaryKey){if(1===cmpResultKey)continue;const cmpResultPrimaryKey=cmp(record.value,primaryKey);if(0===cmpResultKey&&1===cmpResultPrimaryKey)continue}if(void 0===this._position||!sourceIsObjectStore||-1===cmpResultPosition){if(void 0!==this._position&&!sourceIsObjectStore){if(1===cmpResultPosition)continue;if(0===cmpResultPosition&&-1!==cmp(record.value,this._objectStorePosition))continue}if(void 0===this._range||this._range.includes(record.key)){foundRecord=record;break}}}}}else if("prevunique"===this.direction){let tempRecord;const range=makeKeyRange(this._range,[],[key,this._position]);for(const record of records.values(range,"prev"))if((void 0===key||1!==cmp(record.key,key))&&(void 0===this._position||-1===cmp(record.key,this._position))&&(void 0===this._range||this._range.includes(record.key))){tempRecord=record;break}tempRecord&&(foundRecord=records.get(tempRecord.key))}if(foundRecord){if(this._position=foundRecord.key,sourceIsObjectStore||(this._objectStorePosition=foundRecord.value),this._key=foundRecord.key,sourceIsObjectStore)this._primaryKey=structuredClone(foundRecord.key),this._keyOnly||"[object IDBCursorWithValue]"!==this.toString()||(this.value=structuredClone(foundRecord.value));else if(this._primaryKey=structuredClone(foundRecord.value),!this._keyOnly&&"[object IDBCursorWithValue]"===this.toString()){if(this.source instanceof FDBObjectStore)throw new Error("This should never happen");const value=this.source.objectStore._rawObjectStore.getValue(foundRecord.value);this.value=structuredClone(value)}this._gotValue=!0,result=this}else this._key=void 0,sourceIsObjectStore||(this._objectStorePosition=void 0),this._keyOnly||"[object IDBCursorWithValue]"!==this.toString()||(this.value=void 0),result=null;return result}update(value){if(void 0===value)throw new TypeError;const effectiveObjectStore=getEffectiveObjectStore(this),effectiveKey=Object.hasOwn(this.source,"_rawIndex")?this.primaryKey:this._position,transaction=effectiveObjectStore.transaction;if("active"!==transaction._state)throw new TransactionInactiveError;if("readonly"===transaction.mode)throw new ReadOnlyError;if(effectiveObjectStore._rawObjectStore.deleted)throw new InvalidStateError;if(!(this.source instanceof FDBObjectStore)&&this.source._rawIndex.deleted)throw new InvalidStateError;if(!this._gotValue||!Object.hasOwn(this,"value"))throw new InvalidStateError;const clone=structuredClone(value);if(null!==effectiveObjectStore.keyPath){let tempKey;try{tempKey=extractKey(effectiveObjectStore.keyPath,clone)}catch(err){}if(0!==cmp(tempKey,effectiveKey))throw new DataError}const record={key:effectiveKey,value:clone};return transaction._execRequestAsync({operation:effectiveObjectStore._rawObjectStore.storeRecord.bind(effectiveObjectStore._rawObjectStore,record,!1,transaction._rollbackLog),source:this})}advance(count){if(!Number.isInteger(count)||count<=0)throw new TypeError;const effectiveObjectStore=getEffectiveObjectStore(this),transaction=effectiveObjectStore.transaction;if("active"!==transaction._state)throw new TransactionInactiveError;if(effectiveObjectStore._rawObjectStore.deleted)throw new InvalidStateError;if(!(this.source instanceof FDBObjectStore)&&this.source._rawIndex.deleted)throw new InvalidStateError;if(!this._gotValue)throw new InvalidStateError;this._request&&(this._request.readyState="pending"),transaction._execRequestAsync({operation:()=>{let result;for(let i=0;i<count&&(result=this._iterate(),result);i++);return result},request:this._request,source:this.source}),this._gotValue=!1}continue(key){const effectiveObjectStore=getEffectiveObjectStore(this),transaction=effectiveObjectStore.transaction;if("active"!==transaction._state)throw new TransactionInactiveError;if(effectiveObjectStore._rawObjectStore.deleted)throw new InvalidStateError;if(!(this.source instanceof FDBObjectStore)&&this.source._rawIndex.deleted)throw new InvalidStateError;if(!this._gotValue)throw new InvalidStateError;if(void 0!==key){key=valueToKey(key);const cmpResult=cmp(key,this._position);if(cmpResult<=0&&("next"===this.direction||"nextunique"===this.direction)||cmpResult>=0&&("prev"===this.direction||"prevunique"===this.direction))throw new DataError}this._request&&(this._request.readyState="pending"),transaction._execRequestAsync({operation:this._iterate.bind(this,key),request:this._request,source:this.source}),this._gotValue=!1}continuePrimaryKey(key,primaryKey){const effectiveObjectStore=getEffectiveObjectStore(this),transaction=effectiveObjectStore.transaction;if("active"!==transaction._state)throw new TransactionInactiveError;if(effectiveObjectStore._rawObjectStore.deleted)throw new InvalidStateError;if(!(this.source instanceof FDBObjectStore)&&this.source._rawIndex.deleted)throw new InvalidStateError;if(this.source instanceof FDBObjectStore||"next"!==this.direction&&"prev"!==this.direction)throw new InvalidAccessError;if(!this._gotValue)throw new InvalidStateError;if(void 0===key||void 0===primaryKey)throw new DataError;key=valueToKey(key);const cmpResult=cmp(key,this._position);if(-1===cmpResult&&"next"===this.direction||1===cmpResult&&"prev"===this.direction)throw new DataError;const cmpResult2=cmp(primaryKey,this._objectStorePosition);if(0===cmpResult&&(cmpResult2<=0&&"next"===this.direction||cmpResult2>=0&&"prev"===this.direction))throw new DataError;this._request&&(this._request.readyState="pending"),transaction._execRequestAsync({operation:this._iterate.bind(this,key,primaryKey),request:this._request,source:this.source}),this._gotValue=!1}delete(){const effectiveObjectStore=getEffectiveObjectStore(this),effectiveKey=Object.hasOwn(this.source,"_rawIndex")?this.primaryKey:this._position,transaction=effectiveObjectStore.transaction;if("active"!==transaction._state)throw new TransactionInactiveError;if("readonly"===transaction.mode)throw new ReadOnlyError;if(effectiveObjectStore._rawObjectStore.deleted)throw new InvalidStateError;if(!(this.source instanceof FDBObjectStore)&&this.source._rawIndex.deleted)throw new InvalidStateError;if(!this._gotValue||!Object.hasOwn(this,"value"))throw new InvalidStateError;return transaction._execRequestAsync({operation:effectiveObjectStore._rawObjectStore.deleteRecord.bind(effectiveObjectStore._rawObjectStore,effectiveKey,transaction._rollbackLog),source:this})}toString(){return"[object IDBCursor]"}}export default FDBCursor;